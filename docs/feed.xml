<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://miere.observer/feed.xml" rel="self" type="application/atom+xml" /><link href="https://miere.observer/" rel="alternate" type="text/html" /><updated>2020-05-11T11:19:48+10:00</updated><id>https://miere.observer/feed.xml</id><title type="html">Miere’s Personal Observations</title><subtitle>Miere's Personal Observations</subtitle><entry><title type="html">Producing Professional Deliverables</title><link href="https://miere.observer/engineering/2020/04/20/Producing-professional-deliverables.html" rel="alternate" type="text/html" title="Producing Professional Deliverables" /><published>2020-04-20T00:00:00+10:00</published><updated>2020-04-20T00:00:00+10:00</updated><id>https://miere.observer/engineering/2020/04/20/Producing-professional-deliverables</id><content type="html" xml:base="https://miere.observer/engineering/2020/04/20/Producing-professional-deliverables.html">&lt;p&gt;When someone is described as a professional one might see that person as someone who does something for a living. Others might agree with the Cambridge dictionary, seeing professionals as those who have “[…] the type of job that needs a high level of education and training” &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Perhaps we can all agree that the meaning of words evolves as time passes by - having its meaning adapted to suit a more recent context. Maybe “professional” in the modern days might’ve acquired different meaning from what it used to have in the past.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;main-banner&quot; src=&quot;../../../../imgs/craft-tools.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-need-for-consistency&quot;&gt;The need for consistency&lt;/h2&gt;
&lt;p&gt;Let’s take football players &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; for a moment. They only begun getting paid as professionals since last quarter of the 18th century &lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; but when we compare the quality of the games back then with nowadays’, and we put nostalgia aside, the gap is huge. Pelé, Maradona, Zidane and Messi are historically regarded as those who took the game to the next level. But so did managers and coaches, “who dreamed up catenaccio and zonal marking and the sweeper system, all of it designed to stop the virtuosos showcasing their talents” &lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;The bar was raised to a point where we’ve been scoring less than a hundred years ago &lt;sup id=&quot;fnref:4:1&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;. While only a few players can keep up with their careers for more than 8 years &lt;sup id=&quot;fnref:4:2&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, most of them tend to retire quite early - especially if compared to a software engineer. In fact, the most successful footballers were those who had more &lt;strong&gt;consistent performance&lt;/strong&gt; in their teams.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Consistency&lt;/em&gt; is probably the most desirable skill I look for when I hire someone. Independently on how senior as an engineer you are, delivering consistent results means that I can predict how long it takes for you to finish your tasks, how many issues you might introduce in software and, how much effort should I put for you to reach the ideal performance within the team.&lt;/p&gt;

&lt;p&gt;The more senior you are the fewer issues you might introduce, the faster you can learn and adopt a new technique and the more adaptable you are to tackle problems you’ve never faced before. But, if you don’t master the techniques you’ve learned before in a way that you produce consistent results, your seniority might be easily replaceable by a junior. Think about it, if you can learn consistently, the more I teach you the more improvement I can see on your deliverables. On the other hand, a non-consistent senior developer might learn something new and put it in practice straight away but may struggle to use it under a different scenario as he hasn’t trained long enough to master his new skill.&lt;/p&gt;

&lt;h2 id=&quot;reproducibility-is-key&quot;&gt;Reproducibility is key&lt;/h2&gt;
&lt;p&gt;If we go a few centuries back, we would see craft workers (such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Artisan&quot;&gt;Artisans&lt;/a&gt;) in action, perhaps the contemporary version of the Software Engineer as we know it &lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;. A skilled craft worker creates material objects partly or entirely by hand. Artisans were the dominant producers of consumer products before the Industrial Revolution. Once passed through the career chain from apprentice to journeyman, he could be elected to become a master craftsman, enjoying one of the highest social statuses in their communities at the time. &lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;The success of the &lt;a href=&quot;https://en.wikipedia.org/wiki/British_Agricultural_Revolution&quot;&gt;Agricultural Revolution&lt;/a&gt; of the 18th century created a favourable climate for industrialization. With increasing production of food, the British population could be fed at lower prices with less effort than ever before. The surplus of food meant that British families &lt;a href=&quot;https://study.com/academy/lesson/causes-of-the-first-industrial-revolution.html&quot;&gt;could use the money they saved to purchase manufactured goods&lt;/a&gt;. Under given circumstances, it’s easy to understand that craft workers weren’t enough to cope with the higher demand for goods that were needed.&lt;/p&gt;

&lt;p&gt;Just as the demand for consistent and reliable delivered goods ended up replacing artisans with machines, &lt;span class=&quot;highlight&quot;&gt;the overwhelming demand for value to be provided by the current software industry will also raise the bar&lt;/span&gt; in a way that Software Engineers who lack precision, predictability or measurement won’t make it far in their careers.&lt;/p&gt;

&lt;p&gt;To better understand this idea, let’s assume a developer was elected by his team to design a microservice from scratch. On his team, there’s no one in charge of the infrastructure or taking macro architectural decisions. A good outcome from this project might be big deal for his reputation, especially if no one else has to worry about bugs if there’s a brief README file explaining how to run the software locally and releasing a new version of it is just a matter of having a Pull Request approved.&lt;/p&gt;

&lt;p&gt;One might argue that taking care of all of these details consumes valuable time that would be better spent implementing new features. But I dread the days when I had to stop what I was doing to answer questions from my colleagues when they have to maintain a software I’ve previously written without proper documentation. Eventually, I realized that when the README file is good enough I have fewer interruptions. When my unit tests cover most of - if not all - the source code, I have fewer bugs to fix and hence have more time to create something new.&lt;/p&gt;

&lt;p&gt;A wise engineer, though, may go even further and streamline his knowledge in a way that can be easily reproducible as well. What if a Kotlin developer has &lt;a href=&quot;https://github.com/Skullabs/kos-sample-gradle&quot;&gt;a small Gradle project&lt;/a&gt; on his Github account? Why don’t we create &lt;a href=&quot;https://github.com/miere/terraform-aws-fargate-ha-web&quot;&gt;a module to deploy our software using Docker&lt;/a&gt;? Wouldn’t it be useful if you save that &lt;a href=&quot;https://github.com/miere/terraw&quot;&gt;small script&lt;/a&gt; that automates everything you need to run your terraform scripts? If designing software is the main part of your job, perhaps you should figure out a way to reproduce the boring tasks as quickly as possible when the necessity comes up you will be able to deliver a masterpiece much faster than anyone else.&lt;/p&gt;

&lt;h2 id=&quot;going-beyond-kents-simple-design&quot;&gt;Going beyond Kent’s Simple Design&lt;/h2&gt;
&lt;p&gt;Speaking of masterpieces, in the 1990s Kent Beck introduced The Four Elements of Simple Design, a principle that would be later immortalised in his &lt;a href=&quot;https://www.amazon.com/gp/product/0201616416&quot;&gt;book Extreme Programming Explained&lt;/a&gt;. He states these rules as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Runs all the tests&lt;/li&gt;
  &lt;li&gt;Has no duplicated logic. Be wary of hidden duplication like parallel class hierarchies&lt;/li&gt;
  &lt;li&gt;States every intention important to the programmer&lt;/li&gt;
  &lt;li&gt;Has the fewest possible classes and methods&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;His rules were written in priority order, where the ones at the top take priority over the following ones. It comes as no surprise that, if you can’t afford the time to have all of it, he would like you to put more effort into tests. Being behind the roots of unit testing frameworks we have nowadays &lt;sup id=&quot;fnref:9&quot;&gt;&lt;a href=&quot;#fn:9&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;, the author of &lt;a href=&quot;https://en.wikipedia.org/wiki/SUnit&quot;&gt;SUnit&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Kent_Beck&quot;&gt;co-authoring&lt;/a&gt; JUnit with Erich Gamma, he’s an avid advocate of testing as feedback tool &lt;sup id=&quot;fnref:8&quot;&gt;&lt;a href=&quot;#fn:8&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;, something you can read from the man itself on his award-winning book &lt;sup id=&quot;fnref:10&quot;&gt;&lt;a href=&quot;#fn:10&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt; &lt;a href=&quot;https://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530/&quot;&gt;Test-Driven Development by Example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s take the popular &lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;MVC pattern&lt;/a&gt; to draw a comparison with Beck’s rules. Between the late 2000s and early 2010s, MVC was considered the &lt;em&gt;silver bullet pattern&lt;/em&gt; for his adopters &lt;sup id=&quot;fnref:11&quot;&gt;&lt;a href=&quot;#fn:11&quot; class=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt;. In an era where nobody was actually concerned about &lt;a href=&quot;https://en.wikipedia.org/wiki/Separation_of_concerns&quot;&gt;Separation of Concerns&lt;/a&gt; and the front-end was mostly rendered by the backend, it was indeed quite convenient to grow your software by simply placing classes in one of its three buckets. Despite its convenience, not all software designed mostly using MVC (from end-to-end) is easy to maintain, once it grows bigger the need for new features to be included urges us to adopt different approaches - a phenomenon well described by Meir Lehman &lt;a href=&quot;https://ieeexplore.ieee.org/document/1456074&quot;&gt;in another master piece&lt;/a&gt; &lt;sup id=&quot;fnref:12&quot;&gt;&lt;a href=&quot;#fn:12&quot; class=&quot;footnote&quot;&gt;11&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Kent’s rules, on the other hand, are distinguished from other methodologies by focusing on the &lt;em&gt;outcome you might have&lt;/em&gt; instead of &lt;em&gt;how one has to organize his code&lt;/em&gt;. It is benefit-driven, encouraging you to adopt whatever strategy you have in your playbook as long as you respect those outcomes. As a result, maintainability and fast feedback on breaking changes will be the benefits those who adopt it will be rewarded with. That’s the actual mindset a professional has that to keeps the &lt;strong&gt;quality&lt;/strong&gt; of their deliverables higher than the average.&lt;/p&gt;

&lt;p&gt;Since it’s been more than 2 decades since these rules have been crafted, if you allow me, I’d like to respectfully include a couple of items that I think should be mandatory for any professional delivery in software.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;It should be possible to run all your tests with a single (yet simple) command.&lt;/li&gt;
  &lt;li&gt;It should be possible to run your software with a single (yet simple) command.&lt;/li&gt;
  &lt;li&gt;It should be possible to package your software with a single (yet simple) command.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While these 3 rules I’m introducing might be seen as silly at first glance, it makes perfect sense when you need to handover your deliverable to someone else. Just as Beck’s rules, they’ve been ordered by priority as well, thus, if you can’t afford to have all of them, just make sure one can painlessly run all tests and check for regressions on your software. The last two rules are somewhat related, as you need to package your software to run it locally. Thoroughly reviewing all the dependencies (libraries, tools, and dependent services) your service relies on are &lt;a href=&quot;https://dzone.com/articles/learn-how-to-setup-a-cicd-pipeline-from-scratch&quot;&gt;the foundation to have a hassle free CI/CD setup process&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h2&gt;
&lt;p&gt;Professionalism is a quite subjective topic, but it worth keeping in mind that we’re living in a different world where the current standards of our industry expect higher delivery pace, and less time spent on bugs or amending poorly developed features. Even complex structures have been shrewdly discouraged. In fact, managers are going one step further in this direction, trying their best to reduce the learning curve when developers jump in to maintain a different microservice, independently from whether the developer is a newcomer or a long-time hero within the company &lt;sup id=&quot;fnref:13&quot;&gt;&lt;a href=&quot;#fn:13&quot; class=&quot;footnote&quot;&gt;12&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;If I could sum up the aforementioned topics, I’d say the Professional Software Engineer from nowadays should be consistently capable of delivering high-quality software in a way that anyone with the source code could maintain it with no hassle.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;Special thanks to &lt;a href=&quot;https://www.linkedin.com/in/gabrielsjacques/&quot;&gt;Gabriel Jacques&lt;/a&gt;, Ricardo Baumgartner and &lt;a href=&quot;http://vnaik.com&quot;&gt;Varun Naik&lt;/a&gt; for their contributions.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://dictionary.cambridge.org/dictionary/english/professional&quot;&gt;Cambrige dictionary’s definition of the word “professional”&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Football_player&quot;&gt;Football&lt;/a&gt;, also known as soccer for the Americans &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fergus_Suter&quot;&gt;Fergus Suter&lt;/a&gt; was arguably the first recognised professional footballer. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;Instead of the consistent and insistent downward trend in goals we have seen over a century and a half of play, in the last 60 years or so there appears to be a levelling off. Goals are not dying. They are plateauing. Scoring has remained essentially stable in the last two decades, perhaps even as far back as the 1970s. See: &lt;a href=&quot;https://slate.com/culture/2013/08/the-numbers-game-why-soccer-teams-score-fewer-goals-than-they-did-100-years-ago.html&quot;&gt;The Great Leveling&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:4:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:4:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot;&gt;
      &lt;p&gt;In fact, there’s a whole movement in which developers describe themselves as Software Craftsman. Perhaps the best description of how Software Engineering became more relevant in the field can be found in &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_craftsmanship&quot;&gt;this article&lt;/a&gt; in Wikipedia. &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot;&gt;
      &lt;p&gt;See &lt;em&gt;History of Western Civilization&lt;/em&gt; at Boise State University’s &lt;a href=&quot;https://web.archive.org/web/20090107061228/http://history.boisestate.edu/westciv/medsoc/23.shtml&quot;&gt;“Document No.23”&lt;/a&gt;. Archived from the &lt;a href=&quot;http://history.boisestate.edu/westciv/medsoc/23.shtml&quot;&gt;original&lt;/a&gt; on 2009-01-07. Retrieved 2009-01-08. &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:9&quot;&gt;
      &lt;p&gt;Kent Bech is often cast as the mind that leads to the &lt;a href=&quot;https://en.wikipedia.org/wiki/XUnit&quot;&gt;xUnit&lt;/a&gt; frameworks being widely adopted. &lt;a href=&quot;#fnref:9&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:8&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://medium.com/@kentbeck_7670/programmer-test-principles-d01c064d7934&quot;&gt;According to Beck&lt;/a&gt;, “Programmer tests are an oracle providing feedback coding-decision-by-coding-decision”. &lt;a href=&quot;#fnref:8&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:10&quot;&gt;
      &lt;p&gt;Co-authored by Addison-Wesley, the book is award-winning of the Jolt Productivity Award. &lt;a href=&quot;#fnref:10&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:11&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://twitter.com/miere/status/14496627913924608&quot;&gt;Here&lt;/a&gt; is a discussion (in PT_BR) back in 2010 I had on Twitter about this very topic, showing how heated a conversation can get when enquiring MVC developers about MVC replacements. At the time, I was under heavy training by &lt;a href=&quot;https://twitter.com/anielson&quot;&gt;one of my previous mentors&lt;/a&gt;, as he noticed my knowledge was mostly focused on hardware and low-level software development neglecting common design patterns. &lt;a href=&quot;#fnref:11&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:12&quot;&gt;
      &lt;p&gt;In 1974, Lehman stated in his book that “as an E-type system evolves, its complexity increases unless work is done to maintain or reduce it”. &lt;a href=&quot;#fnref:12&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:13&quot;&gt;
      &lt;p&gt;It worth read about &lt;a href=&quot;https://hbr.org/2014/01/how-netflix-reinvented-hr&quot;&gt;how Netflix reinvented the way they manage their teams&lt;/a&gt;, what are their expectations and for how long they’ve decided to invest and quality and reproducibility on their teams to avoid rework and spend more time on what will have higher return of investment. &lt;a href=&quot;#fnref:13&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="engineering" /><category term="master" /><summary type="html">When someone is described as a professional one might see that person as someone who does something for a living. Others might agree with the Cambridge dictionary, seeing professionals as those who have “[…] the type of job that needs a high level of education and training” 1. Perhaps we can all agree that the meaning of words evolves as time passes by - having its meaning adapted to suit a more recent context. Maybe “professional” in the modern days might’ve acquired different meaning from what it used to have in the past. Cambrige dictionary’s definition of the word “professional” &amp;#8617;</summary></entry></feed>