<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://miere.observer/feed.xml" rel="self" type="application/atom+xml" /><link href="https://miere.observer/" rel="alternate" type="text/html" /><updated>2020-06-08T19:10:01+10:00</updated><id>https://miere.observer/feed.xml</id><title type="html">Miere’s Personal Observations</title><subtitle>Miere's Personal Observations</subtitle><entry><title type="html">Understanding the Rule of Three</title><link href="https://miere.observer/engineering/2020/06/08/Understanding-the-Rule-of-Three.html" rel="alternate" type="text/html" title="Understanding the Rule of Three" /><published>2020-06-08T00:00:00+10:00</published><updated>2020-06-08T00:00:00+10:00</updated><id>https://miere.observer/engineering/2020/06/08/Understanding-the-Rule-of-Three</id><content type="html" xml:base="https://miere.observer/engineering/2020/06/08/Understanding-the-Rule-of-Three.html">&lt;p&gt;There is this subconscious understanding that unnecessary complexity is root of all evil in software development. We have been &lt;a href=&quot;https://twitter.com/search?q=dependency%20hell&amp;amp;src=typed_query&quot;&gt;fiercely ranting about the dreadful experience&lt;/a&gt; caused by the dependency hell. We’ve been detracting legacy code as &lt;a href=&quot;https://s3.amazonaws.com/systemsandpapers/papers/bigballofmud.pdf&quot;&gt;big ball of mud because&lt;/a&gt; nobody can honestly understand how it works. Fearlessly, we’ve been &lt;a href=&quot;https://twitter.com/kumar_abhirup/status/1267777496524574721&quot;&gt;shushing our developer mates&lt;/a&gt; arguing that they’ve done the wrong coding choices.&lt;/p&gt;

&lt;p&gt;It is funny how Machiavellian we can become in name of the simplicity. Surely, we can have better days with less cyclic dependencies, we probably can adopt better design patterns or even avoid syntaxes that ordinary people can’t easily read in our source code. But, to remove complexity from our daily routine, we need a systematic approach that our help us to weigh up the benefits of every piece of code we introduce in our software.&lt;/p&gt;

&lt;h2 id=&quot;the-rule-of-three&quot;&gt;The rule of three&lt;/h2&gt;
&lt;p&gt;The first piece of advice I’ve ever read that advocated benefit first to gauge the judgement of any decision made on a piece of code came from Martin Fowler, on his iconic book &lt;a href=&quot;https://archive.org/details/isbn_9780201485677&quot;&gt;Refactoring&lt;/a&gt;. According to him, we should adopt the &lt;a href=&quot;https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)&quot;&gt;rule of three&lt;/a&gt; to drive our refactoring decisions, avoiding overcomplicated strategies that might need to &lt;a href=&quot;https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction&quot;&gt;be rethink again in the future&lt;/a&gt;. Since then, the Rule of Three has been constantly repeated on the internet with subjective definition and, in some cases, with no clear steps to reproduce this technique in the future.&lt;/p&gt;

&lt;h2 id=&quot;distinguishing-chance-coincidence-and-trend&quot;&gt;Distinguishing Chance, Coincidence and Trend&lt;/h2&gt;
&lt;p&gt;My professor of Statistics once taught me about a similar concept: identifying trend behaviour. Letting all mathematic formulas aside, I would reproduce his reasoning and translate to the Software Development world as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Take a chance and design the most simplistic solution to your problem&lt;/strong&gt;. Testing your code will cost you less time, and it will be easier to adapt in case your needs change.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Treat further changes as a coincidence&lt;/strong&gt;. We have this instinct to introduce generic solutions to solve problems that might happen in the future. A premature generalization might require further refactoring, or might be removed altogether being replaced by a different approach in the future. Sometimes, a simple if/else statement is our best choice.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;A good hint to identify trend behaviours is the introduction of duplicated pieces of code&lt;/strong&gt;. That’s the perfect opportunity to introduce abstractions that not only removes these duplications but also allows developers to extend the current logic without modifying it &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Looking to these rules it is clear that it focuses on the software design, diverging from its original proposal as a technique to help you to refactor your code wisely. &lt;em&gt;By adopting it in the early stages of the development, we enforce simplicity over reaction into our systems&lt;/em&gt;, where complex solutions will be introduced only when we need to solve a complex problem.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;Sometimes the requirements are clear enough so you can jump to the complex solution, but that is not usually the case. The above mindset was an attempt to narrow down the scope and try to make it more reproducible on a daily-basis. As a bonus hint, I’d like to left here one another definition that approaches the Rule of Three as something totally different way. I found it when I was reviewing the references for this article and it has been echoing on my mind for a bit of time already. Hopefully it will be just enlightening for you as it was for me.&lt;/p&gt;

&lt;blockquote class=&quot;quote&quot;&gt;
    &lt;p&gt;There are two &quot;rules of three&quot; in  reuse:&lt;/p&gt;
    &lt;ul&gt;
        &lt;li&gt;It is three times as difficult to build reusable components as single use components, and&lt;/li&gt;
        &lt;li&gt;a reusable component should be tried out in three different applications before it will be sufficiently general to accept into a reuse library.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;footer&gt;
        &lt;cite&gt;- Fact#18 from &lt;a href=&quot;https://www.amazon.com/Facts-Fallacies-Software-Engineering-FORGOT-ebook-dp-B001TKD4RG/dp/B001TKD4RG&quot;&gt;Facts and Fallacies of Software Engineering&lt;/a&gt;&lt;/cite&gt;
    &lt;/footer&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;The &lt;a href=&quot;https://stackify.com/solid-design-open-closed-principle/&quot;&gt;Open-Closed Principle&lt;/a&gt; is the perfect technique for this job as, by definition, it closes out methods or classes for modification by introducing customization points that allow it to be extended from outside. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="engineering" /><summary type="html">There is this subconscious understanding that unnecessary complexity is root of all evil in software development. We have been fiercely ranting about the dreadful experience caused by the dependency hell. We’ve been detracting legacy code as big ball of mud because nobody can honestly understand how it works. Fearlessly, we’ve been shushing our developer mates arguing that they’ve done the wrong coding choices.</summary></entry><entry><title type="html">Thinking Asynchronously</title><link href="https://miere.observer/engineering/2020/06/05/Analisys-Thinking-Asynchronously.html" rel="alternate" type="text/html" title="Thinking Asynchronously" /><published>2020-06-05T00:00:00+10:00</published><updated>2020-06-05T00:00:00+10:00</updated><id>https://miere.observer/engineering/2020/06/05/Analisys-Thinking-Asynchronously</id><content type="html" xml:base="https://miere.observer/engineering/2020/06/05/Analisys-Thinking-Asynchronously.html">&lt;header class=&quot;briefing&quot;&gt;
&lt;div class=&quot;video&quot;&gt;&lt;iframe class=&quot;video&quot; src=&quot;https://www.youtube.com/embed/V_tHVUHKqZQ&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;p&gt;This is an opinionated transcription of &lt;a href=&quot;https://twitter.com/edjgeek&quot;&gt;Eric Johnson's&lt;/a&gt; talk &lt;b&gt;Thinking Asynchronously&lt;/b&gt;. He has presented in the 2020 GOTO Conference, online edition because of COVID pandemic. His straightforward presentation approach guides us through steps that take advantage of asynchronous persistence pipelines to provide a better experience to our users. It is a great opportunity for newcomers to understand where AWS want to achieve with serverless from know on. I took the opportunity to elaborate more on a few services used by him on his talk to give more context.&lt;/p&gt;
&lt;/header&gt;

&lt;article class=&quot;timeline&quot;&gt;
    &lt;section&gt;
        &lt;time&gt;2:45&lt;/time&gt;
        &lt;h2&gt;Common Serverless Pattern&lt;/h2&gt;
        &lt;p&gt;Usual serverless application will mimic the typical three-tier architecture. API layer will, as naturally happens, be responsible for Security and Routing, while compute layer will have anything else you need to persist your data into the storage layer. On Eric's perspective this comes with a concerning trade-off: if something goes wrong it will probably fail on your code as it is most vulnerable building block of your architecture.&lt;/p&gt;
    &lt;/section&gt;
    &lt;section&gt;
        &lt;time&gt;5:24&lt;/time&gt;
        &lt;h2&gt;Thinking Asynchronously&lt;/h2&gt;
        &lt;p&gt;Eric proposes that we persist the data before we apply any computation to that. It brings us a few major benefit from the traditional approach:&lt;/p&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;b&gt;Greater reliability&lt;/b&gt;. In case of failure in our codebase, we have our data persisted already.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;Faster response times&lt;/b&gt; in our APIs. By moving the extra computation to a second step, the user already received the feedback in the UI.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;We can do more in less apparent time to the client&lt;/b&gt;. As the complex computing is now the last thing to do, our persistence pipeline has bigger room to process data with no apparent impact on user's experience.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;One might argue that you can squish bits and bytes of your code to provide a similar result. Perhaps the pillars from Eric's approach lies on how it increases the flexibility by reducing the response time on the API side. After all, it's an old known fact that &lt;a href=&quot;https://www.nngroup.com/articles/response-times-3-important-limits/&quot;&gt;better response times implies better user experience&lt;/a&gt;.&lt;/p&gt;
    &lt;/section&gt;
    &lt;section&gt;
        &lt;time&gt;10:14&lt;/time&gt;
        &lt;blockquote&gt;
            &lt;p&gt;Well, we talk about serverless we look at &quot;what is serverless?&quot; and basically I meant serverless is: &lt;b&gt;something happens, we react and do something.&lt;/b&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
    &lt;/section&gt;
    &lt;section&gt;
        &lt;time&gt;10:45&lt;/time&gt;
        &lt;h2&gt;Event Driven Patterns&lt;/h2&gt;
        &lt;p&gt;Event Driven Development is the key to make the suggested approach work. AWS-wise, there's a &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/lambda-services.html&quot;&gt;multitude of events that can you can listen to&lt;/a&gt; with a AWS Lambda function. Of course, you can also take advantage of AWS network services like SNS, SQS and Kinesis to consume asynchronous events on your Docker container or application instance.&lt;/p&gt;
    &lt;/section&gt;
    &lt;section&gt;
        &lt;time&gt;12:06&lt;/time&gt;
        &lt;h2&gt;Amazon API Gateway&lt;/h2&gt;
        &lt;p&gt;I'd like to draw your attention to this versatile service available in AWS, and the idea behind its conception. API Gateway was first &lt;a href=&quot;https://aws.amazon.com/about-aws/whats-new/2015/07/introducing-amazon-api-gateway/&quot;&gt;introduced in 2015&lt;/a&gt;, it communicates directly with 100+ AWS Services, allowing you to transform requests and response payloads with Apache Velocity templating language (VTL). It's commonly used as serverless Rest API, allowing developers to configure HTTP routes in a higher level abstraction in which you don't have to provision resources to handle the request - matching Eric's personal definition of serverless. Requests received by the API Gateway are translated into events, allowing you to listen it directly to any compatible AWS service, like DynamoDB or Lambda.&lt;/p&gt;
        &lt;p&gt;API Gateway is also &lt;a href=&quot;https://microservices.io/patterns/apigateway.html&quot;&gt;a well known pattern&lt;/a&gt;. A few years ago, Netflix OSS team &lt;a href=&quot;https://netflixtechblog.com/embracing-the-differences-inside-the-netflix-api-redesign-15fd8b3dc49d&quot;&gt;introduced their own API Gateway solution&lt;/a&gt;. It was designed with a few key philosophies in mind, &quot;each of which is&quot;, in their words, &quot;instrumental in the design of our new system&quot;:&lt;/p&gt;
        &lt;ul&gt;
            &lt;li&gt;Embrace the Differences of the Devices&lt;/li&gt;
            &lt;li&gt;Separate Content Gathering from Content Formatting/Delivery&lt;/li&gt;
            &lt;li&gt;Redefine the Border Between “Client” and “Server”&lt;/li&gt;
            &lt;li&gt;Distribute Innovation&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;In fact, the problem it solves is wide known between teams handling large fleet of microservices. GraphQL, for instance, approaches these problems from a different perspective, and &lt;a href=&quot;https://en.wikipedia.org/wiki/GraphQL&quot;&gt;has been in internal use on Facebook since 2012 as well&lt;/a&gt;. Since Netflix blog post, several other approaches have been designed at an alternative for the custom brewed API Gateway solution. &lt;a href=&quot;https://www.krakend.io/&quot;&gt;Krakend&lt;/a&gt; is a fairly popular and feature rich stateless API Gateway - might be a good tool for &lt;a href=&quot;https://serverless-training.com/articles/save-money-by-replacing-api-gateway-with-application-load-balancer/&quot;&gt;those situations where the cost AWS API Gateway is an issue&lt;/a&gt;.&lt;/p&gt;
    &lt;/section&gt;
    &lt;section&gt;
        &lt;time&gt;12:06&lt;/time&gt;
        &lt;h2&gt;Amazon DynamoDB&lt;/h2&gt;
        &lt;p&gt;DynamoDB is an underrated, fascinating &lt;a href=&quot;https://www.techopedia.com/definition/29431/database-as-a-service-dbaas&quot;&gt;database service&lt;/a&gt;. The description on its website doesn't make justice to its capabilities: &lt;sup&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
        &lt;/p&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;b&gt;Key-value data store&lt;/b&gt; - It fits perfectly as a persistence layer for tasks that requires intensive write throughput - being especially good for timeseries data or document persistence.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;Expirable entries&lt;/b&gt; - You can define a Time To Live (TTL) value to arbitrary expire entries on your tables.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;Global tables&lt;/b&gt; - DynamoDB can manage tables accessible (replicated) globally.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;In-memory Acceleration with DAX&lt;/b&gt; - It acts as a mix of near cache and table space for ly accessed data. Pricey, but might worth it if you take into account the cost of maintaining such a mechanism by your self.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;Surely, DynamoDB's &lt;a href=&quot;https://aws.amazon.com/dynamodb/&quot;&gt;feature list&lt;/a&gt; is more extensive than that. But the ones above mentioned are ingredients for a multitude of scalable recipes for problems you might face on your daily routine. From &lt;i&gt;The Poor Man's &lt;a href=&quot;https://microservices.io/patterns/data/event-sourcing.html&quot;&gt;Event Sourcing&lt;/a&gt; Tool&lt;/i&gt; &lt;sup&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; to a &lt;i&gt;Globally Distributed Ordered Queue&lt;/i&gt;, it is the kind of Swiss Knife you want to have on your toolbox when you have a complex situation to tackle. You can even create &lt;a href=&quot;https://medium.com/swlh/scheduling-irregular-aws-lambda-executions-through-dynamodb-ttl-attributes-acd397dfbad9&quot;&gt;your ad-hoc scheduling mechanism&lt;/a&gt;, allowing you &quot;to schedule an irregular point of time execution of a lambda execution without abusing CloudWatch crons&quot;.&lt;/p&gt;
        &lt;p&gt;Inevitably, its simple key-value design introduces trade-offs: indexing is quite limited, you can't join tables and you will probably spend a bit of time trying to fine-tuning it for an optimal cost its read and write provisioning &lt;sup&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. But its flexibility and simple API, along with thoughtfully designed persistence tables, might be an elegant and affordable solution for your company.&lt;/p&gt;
    &lt;/section&gt;
    &lt;section&gt;
        &lt;time&gt;14:20&lt;/time&gt;
        &lt;h2&gt;Other &quot;storage first&quot; options&lt;/h2&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/kinesis/&quot;&gt;Amazon Kinesis&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/s3/&quot;&gt;Amazon Simple Storage Service (S3)&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/sqs/&quot;&gt;Amazon Simple Queue Service (SQS)&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/section&gt;
    &lt;section&gt;
        &lt;time&gt;24:28&lt;/time&gt;
        &lt;h2&gt;Amazon EventBridge&lt;/h2&gt;
        &lt;p&gt;This is another obscure but intriguing service available in the AWS portfolio. EventBridge is more than &lt;a href=&quot;https://books.google.com.au/books?id=qR0hDgAAQBAJ&amp;amp;pg=PA54&amp;amp;lpg=PA54&amp;amp;dq=old-fashion+service+bus&amp;amp;source=bl&amp;amp;ots=ngRwK-Xg27&amp;amp;sig=ACfU3U34CuRKeKawirqsgr5YT-pRQwFCnw&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=2ahUKEwjam8Sov-_pAhUX4jgGHYhdCKcQ6AEwCXoECAoQAQ#v=onepage&amp;amp;q=old-fashion%20service%20bus&amp;amp;f=false&quot;&gt;an old-fashion Service Bus&lt;/a&gt;, but a blistering fast &lt;a href=&quot;https://en.wikipedia.org/wiki/Decision_tree&quot;&gt;decision tree&lt;/a&gt; capable to translate inputs into actions. It can connect with, basically, everything from AWS Lambda and AWS Step Functions to AWS Kinesis and AWS SQS. You even use AWS SNS to trigger a further HTTP request to an external service.&lt;/p&gt;
    &lt;/section&gt;
    &lt;section&gt;
        &lt;time&gt;31:03&lt;/time&gt;
        &lt;h2&gt;Lambda Destinations&lt;/h2&gt;
        &lt;blockquote&gt;
        &lt;p&gt;With Destinations, you can route asynchronous function results as an execution record to a destination resource without writing additional code. An execution record contains details about the request and response in JSON format including version, timestamp, request context, request payload, response context, and response payload. For each execution status such as Success or Failure you can choose one of four destinations: another Lambda function, SNS, SQS, or EventBridge. Lambda can also be configured to route different execution results to different destinations.&lt;/p&gt;
        &lt;footer&gt;
            &lt;cite&gt;As we've reached the apex of this talk, Eric was so excited that his explanation was a bit disastrous &lt;sup&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, so I decided to quote an &lt;a href=&quot;https://aws.amazon.com/blogs/compute/introducing-aws-lambda-destinations/&quot;&gt;AWS Blog post about Destinations&lt;/a&gt; instead.&lt;/cite&gt;
        &lt;/footer&gt;
        &lt;/blockquote&gt;
    &lt;/section&gt;
&lt;/article&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
        &lt;p&gt;&quot;A fully managed proprietary NoSQL database service that supports key-value and document data structures. DynamoDB can handle more than 10 trillion requests per day and can support peaks of more than 20 million requests per second&quot; - as was seen in the &lt;a href=&quot;https://aws.amazon.com/dynamodb/&quot;&gt;Amazon DynamoDB&lt;/a&gt; description page - 05/Jun/2020.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
        &lt;p&gt;Depending on how you design your tables, TTL and stream listeners, it might be cheaper than spinning up and maintaining a Kafka cluster.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
        &lt;p&gt;The pricing model is not the same pay-as-go that you find on most of AWS services, instead of paying for requests you pay for the provisioned read and write capabilities of your tables. It's true that, a long time ago, Amazon introduced auto-scaling capabilities for table provisioning, but still you have to keep its pricing model in mind otherwise you might run out of budget.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
        &lt;p&gt;Eric's explanation about Lambda Destination: &quot;There is this really cool thing we announced last Re:Invent called Lambda Destinations. And the way this works is I can run a function and if it is successful than I can just trigger some data into EventBridge, Lambda SNS or SQS. Or if it is on fail, I can then trigger data into the same data.&quot;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="engineering" /><category term="master" /><summary type="html">This is an opinionated transcription of Eric Johnson's talk Thinking Asynchronously. He has presented in the 2020 GOTO Conference, online edition because of COVID pandemic. His straightforward presentation approach guides us through steps that take advantage of asynchronous persistence pipelines to provide a better experience to our users. It is a great opportunity for newcomers to understand where AWS want to achieve with serverless from know on. I took the opportunity to elaborate more on a few services used by him on his talk to give more context.</summary></entry><entry><title type="html">Documenting Your Software Architecture</title><link href="https://miere.observer/engineering/2020/05/22/Documenting-Your-Software-Architecture.html" rel="alternate" type="text/html" title="Documenting Your Software Architecture" /><published>2020-05-22T00:00:00+10:00</published><updated>2020-05-22T00:00:00+10:00</updated><id>https://miere.observer/engineering/2020/05/22/Documenting-Your-Software-Architecture</id><content type="html" xml:base="https://miere.observer/engineering/2020/05/22/Documenting-Your-Software-Architecture.html">&lt;p&gt;In the 2000s we went from documenting every single class of our software to not at all. It was an attempt to increase the delivery pace, keeping the team away from tasks that, eventually, have to be remade once the software changes. As a side effect, scaling the team became a problem. The most notable one is the lack of autonomy from its members. Not only newcomers need special attention to get familiarized with the basics of their software (like building and running it), but they would still ask several questions until they understand how it works and how it solves the problem it was designed for.&lt;/p&gt;

&lt;p&gt;It is a known fact that designing new software requires meticulous planning, strict alignment between team members and keep them focused on the defined goal. Reducing the scope of your documentation to the software architecture might be a good starting point, as you probably don’t need to document every single class of your software to give them enough direction when they are coding. It relieves teams from frequently asked questions and forcing its members to stick with previous definitions unless a big change is necessary, and will let them focus on the business side of their projects.&lt;/p&gt;

&lt;p&gt;Unlike the lack of autonomy, lack of accountability plays a non-neglectable indirect impact on team performance. Let us assume that in a Software Development team we are going to face only three types of issues: bugs, business-related issues and architecture issues. While Developers are accountable for solving bugs, and Product Owners for business-related issues, even on teams where there’s a dedicated Software Architect nobody responds for the architectural problems the team faces. On first glance, it seems unfair to blame him for a problem that was introduced collectively by a multitude of reasons that happened together.&lt;/p&gt;

&lt;p&gt;In reality, once the team starts documenting their learnings and architectural decisions they will become more accountable from their architectural decisions. By being fully aware of the technical decisions made in the past and understanding the expected positive outcome it introduced, teams can be accountable for architecture issues on the software, erasing the grey zone between Architecture Decisions and Business Decisions.&lt;/p&gt;

&lt;h2 id=&quot;documenting-for-your-different-audiences&quot;&gt;Documenting for your different audiences&lt;/h2&gt;
&lt;p&gt;Documentation is a tool to transfer knowledge, to keep the team on the same page regarding &lt;strong&gt;what problem the software solves, how those problems were solved, what were the technical decisions that should be followed widely during the development, and how one can run the software and see it in action&lt;/strong&gt;. Having long essays written in an MS Word document or a Wiki page is not enough to efficiently convey the information to the team members.&lt;/p&gt;

&lt;p&gt;On &lt;a href=&quot;https://youtu.be/x2-rSnhpw0g&quot;&gt;his talk&lt;/a&gt; Visualising The Software Architecture, &lt;a href=&quot;https://simonbrown.je/&quot;&gt;Simon Brown&lt;/a&gt; stressed that “as your software have different audiences with different needs”. He means that you need different tools to cover how the different layers of our software work. Thus, along with his iconic C4Model - which will be discussed later - I have adopted a couple of simple-yet-powerful guidelines that helped me to contextualize whoever is maintaining our source code.&lt;/p&gt;

&lt;h2 id=&quot;the-source-code-guideline&quot;&gt;The Source Code Guideline&lt;/h2&gt;
&lt;p&gt;For the sake of productivity, the documentation should be started with the Source Code Guideline, which covers the basics concepts a developer might need to understand how the project source code is structured. A basic version of this document should answer the following questions a developer might have - although it can be enhanced with more topics whenever needed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How to run the software locally?&lt;/li&gt;
  &lt;li&gt;How to run all automated tests locally?&lt;/li&gt;
  &lt;li&gt;How to package the software?&lt;/li&gt;
  &lt;li&gt;How to deploy the software?&lt;/li&gt;
  &lt;li&gt;How to edit the software?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bear in mind that long lists of commands can lead to reproducibility issues. So try to keep it as neat as possible, &lt;a href=&quot;https://miere.observer/engineering/2020/04/20/Producing-professional-deliverables.html#going-beyond-kents-simple-design&quot;&gt;automating it before documenting it&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;note&quot;&gt;
&lt;a href=&quot;https://gist.github.com/miere/cba07143f3f37c64fc0fa82a8e9179a6&quot;&gt;Here&lt;/a&gt; you can find a sample document that answers these questions with topics, making them easy to read.
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-architecture-decisions-guideline&quot;&gt;The Architecture Decisions Guideline&lt;/h2&gt;
&lt;p&gt;Next comes the Architecture Decisions Guideline, which complies of everything that might affect the daily routine of any contributor to your software. It should be straightforward and concise, not only pointing the exact direction one has to follow to contribute to the software, but also introducing them lessons learnt from the past and decision taken to avoid possible issues. It may contain:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An analytical list of problems, techniques and methodologies that should be avoided on the project.&lt;/li&gt;
  &lt;li&gt;A detailed process of how issues should be fixed and how new features should be introduced in the software. Make sure to state the tools involved in this process - e.g. Git branches.&lt;/li&gt;
  &lt;li&gt;A brief explanation of how new releases are rolled out to production.&lt;/li&gt;
  &lt;li&gt;An explanation of how quality is enforced before a release is closed.&lt;/li&gt;
  &lt;li&gt;What coding principles shall be applied otherwise the proposed modifications might be denied.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When to compose this document is a complex topic. Synergic teams are constantly aligned and might be on the same page right from the conception of the software, which would allow the team to postpone the document creation to a future moment. It’s desirable, though, to have it finished once the first stable version of the software is released. Its existence will be the backbone of any code review that might happen in the future. It will ensure that the quality the code base achieved will last long enough so developers can move to the next project with peace of mind.&lt;/p&gt;

&lt;blockquote class=&quot;note&quot;&gt;
&lt;a href=&quot;https://gist.github.com/miere/bcd10534a0c26f30b7e6d5234c4e903e&quot;&gt;Here&lt;/a&gt; you can find a sample document that exemplifies how it can be composed. This one, though, is a bit denser than the previous one as it was based on a previously written document taken from a previous customer.
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-c4model&quot;&gt;The C4Model&lt;/h2&gt;
&lt;p&gt;C4Model is probably the most pragmatic documentation model I’ve come across. Simon came with the idea to represent the different layers of software with diagrams. When he conceived it, he wanted us to experience a model that worked like maps: by zooming out you get more context you dive into more details, but when you zoom out to better understand in which context the software is running on.  According to the way he conceives it, any software can be described in four main layers, each of which is represented by one diagram:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;System Context Diagram&lt;/strong&gt; - Shows the software in question in the centre, identifying who works with it and what it depends on.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Containers Diagram&lt;/strong&gt; - Illustrates the overall shape of the architecture and a few technology choices.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Components Diagram&lt;/strong&gt; - Explains the logical components and their interactions within the component.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Code Diagrams&lt;/strong&gt; - Explains component implementations in detail.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first three diagrams are his creations, all of which adopts simplistic notations to demonstrate how a particular piece of the system is working. Code Diagrams, on the other hand, are basically UML and he discourages us to adopt them as they tend to become outdated quite frequently. It is there in the case you have a specific need where documenting the source code itself is mandatory task.&lt;/p&gt;

&lt;p&gt;C4Model is &lt;a href=&quot;https://c4model.com/&quot;&gt;well documented on its website&lt;/a&gt;, with several years spent polishing it to reach this level of simplicity and organization. The beauty behind these diagrams lies in the fact we can pick our target audience, allowing us to choose when and who should be involved in the documentation process.&lt;/p&gt;</content><author><name></name></author><category term="engineering" /><summary type="html">In the 2000s we went from documenting every single class of our software to not at all. It was an attempt to increase the delivery pace, keeping the team away from tasks that, eventually, have to be remade once the software changes. As a side effect, scaling the team became a problem. The most notable one is the lack of autonomy from its members. Not only newcomers need special attention to get familiarized with the basics of their software (like building and running it), but they would still ask several questions until they understand how it works and how it solves the problem it was designed for.</summary></entry><entry><title type="html">Stuff Internet Says About Software Development #1</title><link href="https://miere.observer/news/2020/05/22/What-Internet-Says-About-Software-Development.html" rel="alternate" type="text/html" title="Stuff Internet Says About Software Development #1" /><published>2020-05-22T00:00:00+10:00</published><updated>2020-05-22T00:00:00+10:00</updated><id>https://miere.observer/news/2020/05/22/What-Internet-Says-About-Software-Development</id><content type="html" xml:base="https://miere.observer/news/2020/05/22/What-Internet-Says-About-Software-Development.html">&lt;p&gt;&lt;em&gt;This is my reading list from the past few days. I decided to put them here as it might be helpful to someone else. It was deeply inspired by &lt;a href=&quot;http://highscalability.com&quot;&gt;HighScalability&lt;/a&gt; blog, a source I’ve been consuming for years.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;article class=&quot;internet-timeline&quot;&gt;
    &lt;section&gt;
        &lt;h2&gt;Microsoft all over the places&lt;/h2&gt;
        &lt;h3&gt;Microsoft keeps its push to become a major player in the Open Source community. Let's take a look at the majestic presence they have at the media recently.&lt;/h3&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;At Microsoft, 47,000 developers generate nearly &lt;b&gt;30 thousand bugs a month&lt;/b&gt;. These items get stored across over 100 AzureDevOps and GitHub repositories. To better label and prioritize bugs at that scale, we couldn’t just apply more people to the problem.&lt;/p&gt;
            &lt;footer&gt;
                &lt;cite&gt;- &lt;a href=&quot;https://www.microsoft.com/security/blog/2020/04/16/secure-software-development-lifecycle-machine-learning/?itm_source=miere.observer&quot;&gt;
                    Secure the software development lifecycle with machine learning
                &lt;/a&gt;&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;Microsoft was on the wrong side of history when open source exploded at the beginning of the century, and I can say that about me personally.&lt;/p&gt;
            &lt;footer&gt;
                &lt;cite&gt;- &lt;a href=&quot;https://www.infoq.com/news/2020/05/rust-winrt-microsoft/?itm_source=miere.observer&quot;&gt;
                    Rust/WinRT Brings Microsoft Closer to Adopting Rust Internally
                &lt;/a&gt;&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;A case study will be written on how Microsoft allowed Zoom to eat their lunch. They spent millions on subterfuge trying to paint Slack as an inferior enemy when MSFT Teams actually can't do what Slack does and Teams' real competitor was Zoom. Now Zoom has 300M Daily Users. Lol.&lt;/p&gt;
            &lt;footer&gt;
                &lt;cite&gt;- &lt;a href=&quot;https://twitter.com/chamath/status/1254522890373885952?s=12&amp;amp;itm_source=miere.observer&quot;&gt;
                    Chamath Palihapitiya
                &lt;/a&gt;&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;Rust/WinRT lets you call any WinRT API past, present, and future using code generated on the fly directly from the metadata describing the API and right into your Rust package where you can call them as if they were just another Rust module.&lt;/p&gt;
            &lt;footer&gt;
                &lt;cite&gt;- Microsoft president Brad Smith, taken from &lt;a href=&quot;https://www.theverge.com/2020/5/18/21262103/microsoft-open-source-linux-history-wrong-statement?itm_source=miere.observer&quot;&gt;
                    Microsoft: we were wrong about open source
                &lt;/a&gt;&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
    &lt;/section&gt;
    &lt;section&gt;
        &lt;h2&gt;Rust on the Radar&lt;/h2&gt;
        &lt;h3&gt;As we're talking about Rust, it seems that is not only Microsoft who's investing time and effort on it.&lt;/h3&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;There are many benefits a standardized ABI would bring to Rust. A stable ABI enables dynamic linking between Rust crates, which would allow for Rust programs to support dynamically loaded plugins (a feature common in C/C++). Dynamic linking would result in shorter compile-times and lower disk-space use for projects, as multiple projects could link to the same dylib. For example, imagine having multiple CLIs all link to the same core library crate.&lt;/p&gt;
            &lt;footer&gt;
                &lt;cite&gt;- &lt;a href=&quot;https://internals.rust-lang.org/t/a-stable-modular-abi-for-rust/12347?itm_source=miere.observer&quot;&gt;
                    A Stable Modular ABI for Rust
                &lt;/a&gt;&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;Programming is hard.&lt;/p&gt;
            &lt;p&gt;Not because our hardware is complex, but simply because we’re all humans. Our attention span is limited, our memory is volatile — in other words, we tend to make mistakes.&lt;/p&gt;
            &lt;footer&gt;
                &lt;cite&gt;- &lt;a href=&quot;https://medium.com/coding-rust/why-rust-b539d0ea5b65?itm_source=miere.observer&quot;&gt;
                    Why Rust?
                &lt;/a&gt; by Omar Faroque&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;The deno_core crate is a very bare bones version of Deno. It does not have dependencies on TypeScript nor on Tokio. It simply provides our Op and Resource infrastructure. That is, it provides an organized way of binding Rust futures to JavaScript promises. The CLI is of course built entirely on top of deno_core.&lt;/p&gt;
            &lt;footer&gt;
                &lt;cite&gt;- &lt;a href=&quot;https://deno.land/v1?itm_source=miere.observer&quot;&gt;
                    Deno 1.0
                &lt;/a&gt; by Ryan Dahl, Bert Belder, and Bartek Iwańczuk&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
    &lt;/section&gt;
    &lt;section&gt;
        &lt;h2&gt;Fowler and Friends&lt;/h2&gt;
        &lt;h3&gt;It looks like a busy week for Martin Fowler and his friends. New ThoughtWorks Radar was released, a few blog entries has been updated and the man himself has carved another set terms and added to his legacy to the Software Engineering.&lt;/h3&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;This division of development into lines of work that split and merge is central to the workflow of software development teams, and several patterns have evolved to help us keep a handle on all this activity. Like most software patterns, few of them are gold standards that all teams should follow.&lt;/p&gt;
            &lt;footer&gt;
                &lt;cite&gt;- &lt;a href=&quot;https://martinfowler.com/articles/branching-patterns.html?itm_source=miere.observer&quot;&gt;
                    Patterns for Managing Source Code Branches
                &lt;/a&gt; by Martin Fowler&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;For this Radar, we decided to call out again infrastructure as code as well as pipelines as code, and we also had a number of conversations about infrastructure configurations, ML pipelines and other related areas. We find that the teams who commonly own these areas do not embrace enduring engineering practices such as applying software design principles, automation, continuous integration, testing, and so on.&lt;/p&gt;
            &lt;footer&gt;
                &lt;cite&gt;- &lt;a href=&quot;https://www.thoughtworks.com/radar?itm_source=miere.observer&quot;&gt;
                    ThoughtWorks' Technology Radar
                &lt;/a&gt;&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;Coming to understand the threat model for your system is not simple. There are an unlimited number of threats you can imagine to any system, and many of them could be likely. [...] Cyber threats chain in unexpected, unpredictable and even chaotic ways. Factors to do with culture, process and technology all contribute. This complexity and uncertainty is at the root of the cyber security problem. This is why security requirements are so hard for software development teams to agree upon.&lt;/p&gt;
            &lt;footer&gt;
                &lt;cite&gt;- &lt;a href=&quot;https://martinfowler.com/articles/agile-threat-modelling.html?itm_source=miere.observer&quot;&gt;
                    A Guide to Threat Modelling for Developers
                &lt;/a&gt; by Jim Gumbley&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
    &lt;/section&gt;
    &lt;section&gt;
        &lt;h2&gt;Other relevant quotes&lt;/h2&gt;
        &lt;h3&gt;Hum, let me see... What else should be mentioned?&lt;/h3&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;Zoom scaled from 20 million to 300 million users&amp;lt;/b&amp;gt; virtually over night. What's incredible is from the outside they've shown little in the way of apparent growing pains, though on the inside it's a good bet a lot of craziness is going on.&lt;/p&gt;
            &lt;footer&gt;
                &lt;cite&gt;- &lt;a href=&quot;http://highscalability.com/blog/2020/5/14/a-short-on-how-zoom-works.html?itm_source=miere.observer&quot;&gt;
                    A Short On How Zoom Works
                &lt;/a&gt;&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;Besides being an interesting approach to a very common problem, their discussion of Piranha also provides some very interesting insights into an organization that's *heavily* invested in feature flagging....&lt;/p&gt;
            &lt;footer&gt;
                &lt;cite&gt;- Pete Hodgson about &lt;a href=&quot;https://twitter.com/ph1/status/1263186192951939072?itm_source=miere.observer&quot;&gt;
                    Uber open-sourcing Piranha
                &lt;/a&gt;, a feature-flagging tool&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;Deferring integration can increase the risk of merge conflicts, which causes you to move more slowly as you spend more energy addressing those conflicts. Slow change can sometimes be more risky than you expect because of the costs of extra work needed to reconcile conflicts, as well as the technical debt that results from bypassing the normal process to fix critical errors.&lt;/p&gt;
            &lt;footer&gt;
                &lt;cite&gt;- &lt;a href=&quot;https://www.techwell.com/techwell-insights/2020/05/code-integration-when-moving-slowly-actually-has-more-risk?itm_source=miere.observer&quot;&gt;
                    Code Integration: When Moving Slowly Actually Has More Risk
                &lt;/a&gt; by Steve Berczuk&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;Simply put, testing in production means testing your features in the environment where your features will live. So what if a feature works in staging, that's great, but you should care if the feature works in production, that's what matters.&lt;/p&gt;
            &lt;footer&gt;
                &lt;cite&gt;- Talia Nassi on&lt;a href=&quot;https://kentcdodds.com/chats-with-kent-podcast/seasons/03/episodes/talia-nassi-on-testing-in-production?itm_source=miere.observer&quot;&gt;
                    Testing in Production
                &lt;/a&gt;&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;[...] when I was asked to reduce the resource requirements of a large MongoDB cluster, I reached the conclusion that the most obvious target - attribute names - wouldn’t lead to the kind of impact I wanted.&lt;/p&gt;
            &lt;footer&gt;
                &lt;cite&gt;- Richard Startin on&lt;a href=&quot;https://richardstartin.github.io/posts/shrinking-bson-documents?itm_source=miere.observer&quot;&gt;
                    Shrinking BSON Documents
                &lt;/a&gt;&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;The most considerable impact I see is in regards to velocity. The team can focus on other business-impactful projects, rather than EKS and Kubernetes maintenance -- the undifferentiated heavy lifting is eliminated. The same reason people move from physical data centers to the cloud, or from EC2 to Serverless: offloading that effort to AWS is a very good proposition.&lt;/p&gt;
            &lt;footer&gt;
                &lt;cite&gt;- &lt;a href=&quot;https://www.infoq.com/news/2020/05/container-scaling-fargate/?itm_source=miere.observer&quot;&gt;
                    Q&amp;amp;A on Container Scaling with Fargate
                &lt;/a&gt;&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;Did you know that &lt;a href=&quot;http://pypi.org&quot;&gt;http://pypi.org&lt;/a&gt; serves 800 million requests and delivers 200 million packages totalling 400 terabytes ... a day? No. Exactly. You want it to just work. Every day, rain or shine. To keep it that way: sponsor them&lt;/p&gt;
            &lt;footer&gt;
                &lt;cite&gt;- &lt;a href=&quot;https://twitter.com/betatim/status/1246792203894231042?src=miere.observer&quot;&gt;
                    Tim Head
                &lt;/a&gt;&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;We recently migrated a few small systems to CockroachDB (as a stepping stone). Overall, the experience was positive. The hassle free HA is a huge peace of mind. I know people say this is easy to do in PG. I have recently setup 2ndQuadrant's pglogical for another system. That was also easy (though the documentation was pretty bad). The end result is quite different though and CockroachDB is just simpler to reason about and manage and, I think, more generally applicable.&lt;/p&gt;
            &lt;footer&gt;
                &lt;cite&gt;- &lt;a href=&quot;https://news.ycombinator.com/item?id=23087514?itm_source=miere.observer&quot;&gt;
                    latch
                &lt;/a&gt;&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;Our actual use-case is a little complex to go into in tweets. But suffice to say, the PUT costs alone to S3 if we did 1-to-1 would end up being just under half our total running costs when factoring in DDB, Lambda, SQS, APIG, etc.&lt;/p&gt;
            &lt;footer&gt;
                &lt;cite&gt;- &lt;a href=&quot;https://twitter.com/alexbdebrie/status/1250224930643423234?s=12&amp;amp;src=miere.observer&quot;&gt;
                    Wayne Robinson
                &lt;/a&gt;&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;Need operational analytics in &lt;a href=&quot;https://twitter.com/hashtag/NoSQL?src=miere.observer&quot;&gt;#NoSQL&lt;/a&gt;? Maintain time bound rollups in &lt;a href=&quot;https://twitter.com/dynamodb?src=miere.observer&quot;&gt;@DynamoDB&lt;/a&gt; with Streams/Lambda then query relevant items by date range and aggregate client side for fast reporting on scaled out data. Turn complex ad hoc queries into simple select statements and save $$$&lt;/p&gt;
            &lt;footer&gt;
                &lt;cite&gt;- &lt;a href=&quot;https://twitter.com/houlihan_rick/status/1258024512035176450?s=12&amp;amp;src=miere.observer&quot;&gt;
                    Rick Houlihan
                &lt;/a&gt;&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;Another part of the solution is GPU acceleration using grCUDA — an open-source language binding that allows developers to share data between NVIDIA GPUs and GraalVM languages (R, Python, JavaScript), and also launch GPU kernels. The team implemented the performance critical components in CUDA for the GPU, and used grCUDA from Python to exchange data with the GPU and to invoke the GPU kernels.&lt;/p&gt;
            &lt;footer&gt;
                &lt;cite&gt;- &lt;a href=&quot;https://medium.com/graalvm/optimizing-machine-learning-performance-at-netsuite-with-graalvm-and-nvidia-gpus-d0d40f0b0cf1?itm_source=miere.observer&quot;&gt;
                    Optimizing Machine Learning Performance at Netsuite with GraalVM and NVIDIA GPUs
                &lt;/a&gt;&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;Although event-driven architecture has existed for more than 15 years, only recently has it gained massive popularity, and there is a reason for that. Most companies are going through a “digital transformation” phase, and with that, crazy requirements occur. The complexity of these requirements force engineers to adopt new ways of designing software, ones that incur less coupling between services and lower maintenance overhead. EDA is one solution to these problems but it is not the only one.&lt;/p&gt;
            &lt;footer&gt;
                &lt;cite&gt;- &lt;a href=&quot;https://stackoverflow.blog/2020/03/16/how-event-driven-architecture-solves-modern-web-app-problems/?itm_source=miere.observer&quot;&gt;
                    How event-driven architecture solves modern web app problems
                &lt;/a&gt;&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;So, let's look at the resulting context of moving to microservices with entity services:&lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Performance analysis and debugging is more difficult. Tracing tools such as Zipkin are necessary.&lt;/li&gt;
                &lt;li&gt;Additional overhead of marshalling and parsing requests and replies consumes some of our precious latency budget.&lt;/li&gt;
                &lt;li&gt;Individual units of code are smaller.&lt;/li&gt;
                &lt;li&gt;Each team can deploy on its own cadence.&lt;/li&gt;
                &lt;li&gt;Semantic coupling requires cross-team negotiation.&lt;/li&gt;
                &lt;li&gt;Features mainly accrue in &quot;nexuses&quot; such as API, aggregator, or UI servers.&lt;/li&gt;
                &lt;li&gt;Entity services are invoked on nearly every request, so they will become heavily loaded.&lt;/li&gt;
                &lt;li&gt;Overall availability is coupled to many different services, even though we expect individual services to be deployed frequently. (A deployment look exactly like an outage to callers!)&lt;/li&gt;
            &lt;/ul&gt;
            &lt;footer&gt;
                &lt;cite&gt;- &lt;a href=&quot;https://stackoverflow.blog/2020/03/16/how-event-driven-architecture-solves-modern-web-app-problems/?itm_source=miere.observer&quot;&gt;
                    The Entity Service Antipattern
                &lt;/a&gt; by Michael T. Nygard&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
        &lt;blockquote class=&quot;quote&quot;&gt;
            &lt;p&gt;Moving all the “what does the world around me look like?” side effects to the beginning of the program, and all the “change the world around me!” side effects to the end of the program, we achieve maximum testability of program logic. And minimum convolution. And separation of concerns: one module makes the decisions, another one carries them out. Consider this possibility the next time you find yourself in testing pain.&lt;/p&gt;
            &lt;footer&gt;
                &lt;cite&gt;- &lt;a href=&quot;https://jessitron.com/2015/06/06/ultratestable-coding-style/?itm_source=miere.observer&quot;&gt;
                    Ultratestable Coding Style
                &lt;/a&gt; by Jessica Joy Kerr&lt;/cite&gt;
            &lt;/footer&gt;
        &lt;/blockquote&gt;
    &lt;/section&gt;
&lt;/article&gt;</content><author><name></name></author><category term="engineering" /><category term="news" /><summary type="html">This is my reading list from the past few days. I decided to put them here as it might be helpful to someone else. It was deeply inspired by HighScalability blog, a source I’ve been consuming for years.</summary></entry><entry><title type="html">Re: Ensuring backwards compatibility in distributed systems</title><link href="https://miere.observer/engineering/2020/05/20/Re-Ensuring-backwards-compatibility-in-distributed-systems.html" rel="alternate" type="text/html" title="Re: Ensuring backwards compatibility in distributed systems" /><published>2020-05-20T00:00:00+10:00</published><updated>2020-05-20T00:00:00+10:00</updated><id>https://miere.observer/engineering/2020/05/20/Re-Ensuring-backwards-compatibility-in-distributed-systems</id><content type="html" xml:base="https://miere.observer/engineering/2020/05/20/Re-Ensuring-backwards-compatibility-in-distributed-systems.html">&lt;p&gt;A few days ago, I spotted a blog post from StackOverflow that drew my attention: &lt;a href=&quot;https://stackoverflow.blog/2020/05/13/ensuring-backwards-compatibility-in-distributed-systems/&quot;&gt;Ensuring backwards compatibility in distributed systems&lt;/a&gt;. That is the sort of topic I love to consume as it gives me new insights and let me know how people are solving similar problems. The article was engagingly good and kept me focused on reading it until the end.&lt;/p&gt;

&lt;p&gt;I would like, though, to write a few remarks about a few definitions assumed in the article which, if taken by the book, are not strictly correct. The idea behind the following paragraphs is far from detracting the author or the post itself. StackOverflow has a massive audience and knowing the correct definition might help them to adopt the right technique for the right job.&lt;/p&gt;

&lt;h2 id=&quot;conditions-which-the-suggested-deployment-technique-works&quot;&gt;Conditions which the suggested deployment technique works&lt;/h2&gt;
&lt;p&gt;In the blog post, there is a topic about software deployment that covers a few important techniques that might be useful for developers to ensure backward compatibility between evolving versions of the same software.  The author emphasized, though, that they will “only work under two conditions”, one of them is applying it to a “brand new software projects”.&lt;/p&gt;

&lt;p&gt;Reading the article I couldn’t notice a single technique that could not be applied to old software. I had the opportunity to adopt those techniques myself in 2013 when I was hired by &lt;a href=&quot;https://www.ibratan.com.br/&quot;&gt;Ibratan&lt;/a&gt; to redesign their primary software. It was mainly written in C and COBOL and, by adopting a combination of &lt;a href=&quot;https://en.wikipedia.org/wiki/Feature_toggle&quot;&gt;Feature Toggle&lt;/a&gt; and &lt;a href=&quot;https://martinfowler.com/bliki/CanaryRelease.html&quot;&gt;Canary Deployment&lt;/a&gt;, I was able to fix some undesirable behaviours the software had and introduce a new API layer written in Java 8.&lt;/p&gt;

&lt;p&gt;Personally, there is no such thing as Old Project, or Legacy Software if you will. There are only Well Written Software and Poorly Written Software, and it is possible to adopt any technique you want in both cases. Arguably, you might see a greater benefit in adopting those techniques in a poorly written software as they usually demand more maintenance.&lt;/p&gt;

&lt;h2 id=&quot;canary-release-vs-bluegreen-deployment&quot;&gt;Canary Release vs Blue/Green Deployment&lt;/h2&gt;
&lt;p&gt;Perhaps this is not directly related to the blog post itself, but to a universal feeling that Canary Deployment and Blue/Green Deployment are the same things. Despite their similarities, it is important to distinguish them apart as they introduce different benefits to our deployment pipeline.&lt;/p&gt;

&lt;p&gt;The term &lt;strong&gt;Blue/Green Deployment&lt;/strong&gt; was first introduced &lt;a href=&quot;https://gitlab.com/snippets/1846041&quot;&gt;ages ago&lt;/a&gt;, having been carved by &lt;a href=&quot;http://dannorth.net&quot;&gt;Daniel Terhorst-North&lt;/a&gt; and &lt;a href=&quot;https://www.thoughtworks.com/profiles/jez-humble&quot;&gt;Jez Humble&lt;/a&gt; by early 2010s. The fundamental idea is to have two easily switchable environments to switch between, allowing the software to be pre-released and tested on a deployment environment similar to the production. Once considered stable, a switch mechanism takes place, redirecting user’s request traffic to the just deployed software.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://martinfowler.com/bliki/BlueGreenDeployment.html&quot;&gt;switch mechanism may vary&lt;/a&gt; depending on the business expectation (e.g. high availability SLAs) or different technical needs (e.g. run smoke tests before release) might you have. One of them is the Canary Release. It “is a technique to reduce the risk of introducing a new software version in production by slowly rolling out the change to a small subset of users before rolling it out to the entire infrastructure and making it available to everybody” &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;By introducing the ability to analyse the impact of the just-released software with real data coming from the production request stream, &lt;em&gt;Data Analysts&lt;/em&gt; and &lt;em&gt;Software Architects&lt;/em&gt; can measure the impact the new release will have, rolling it back if the results are not satisfactory. Blue/Green Deployment, on the other hand, is closely related to the deployment itself, therefore it focuses mostly on the technical side of it - namely high-availability and easy rollback.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;I’d like to stress that the richness of the blog post content should not be blurred away despite the two topics that I covered. Gather all the information needed to compose such post is no easy task and might take precious ours to compose and wrap it in a way that his audience might enjoy. Perhaps a few links in the original to an external content could be enough to clarify the points I’ve made here, although writing down a few paragraphs helped to keep my understanding of those concepts fresh.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://martinfowler.com/bliki/CanaryRelease.html&quot;&gt;Canary Release&lt;/a&gt; by &lt;a href=&quot;http://www.dtsato.com/blog/&quot;&gt;Danilo Sato&lt;/a&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">A few days ago, I spotted a blog post from StackOverflow that drew my attention: Ensuring backwards compatibility in distributed systems. That is the sort of topic I love to consume as it gives me new insights and let me know how people are solving similar problems. The article was engagingly good and kept me focused on reading it until the end.</summary></entry><entry><title type="html">Decomposing a Monolith</title><link href="https://miere.observer/engineering/2020/05/19/Decomposing-Monolith.html" rel="alternate" type="text/html" title="Decomposing a Monolith" /><published>2020-05-19T00:00:00+10:00</published><updated>2020-05-19T00:00:00+10:00</updated><id>https://miere.observer/engineering/2020/05/19/Decomposing-Monolith</id><content type="html" xml:base="https://miere.observer/engineering/2020/05/19/Decomposing-Monolith.html">&lt;header class=&quot;briefing&quot;&gt;
&lt;div class=&quot;video&quot;&gt;&lt;iframe class=&quot;video&quot; src=&quot;https://www.youtube-nocookie.com/embed/9I9GdSQ1bbM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;p&gt;This an opinionated transcription of a talk that &lt;a href=&quot;https://samnewman.io/&quot;&gt;Sam Newman&lt;/a&gt; has presented in the 2019 GOTO Conference, Berlin edition. There were several points on his presentation that, I think, were spot on and deserves to be transcribed and better explained. There is a bit of a debate about whether or not to start from a Monolith and then move to a Microservice Architecture. Understanding how &lt;i&gt;decomposing monolith&lt;/i&gt; might not only shed a light on this but also made us understand the benefits of doing it gradually.&lt;/p&gt;
&lt;/header&gt;

&lt;article class=&quot;timeline&quot;&gt;
    &lt;section&gt;
        &lt;time&gt;2:40&lt;/time&gt;
        &lt;h2&gt;Monolith&lt;/h2&gt;
        &lt;p&gt;Sam emphasises that Monolith Service is not the same as a Legacy System. In practice, they differ substantially and we need to observe them differently so we can deliver a better solution to our managers and customers.&lt;/p&gt;
    &lt;/section&gt;
    &lt;section&gt;
        &lt;time&gt;4:16&lt;/time&gt;
        &lt;h2&gt;Modular Monolith Deployment&lt;/h2&gt;
        &lt;p&gt;After introducing the basic concept of a Monolith, Newman quickly discusses Modular Monolith deployment. Architecture wise, its components are internally split into modules (depending on the language you use it can simply be packages, namespaces or libraries). These modules are using run on the same process and its persistence layer is usually centralized in a single database instance.&lt;/p&gt;
        &lt;p&gt;He believes &lt;i&gt;this is, in theory, a good scenario to be, as these modules can be easily split into smaller services later&lt;/i&gt;, reducing the effort to transition the service into a microservice. &quot;Most people are better of in a modular monolith deployment&quot; than in a microservice architecture - as he will discuss later.&lt;/p&gt;
    &lt;/section&gt;
    &lt;section&gt;
        &lt;time&gt;7:14&lt;/time&gt;
        &lt;h2&gt;Third-party Monolith&lt;/h2&gt;
        &lt;p&gt;Newman describes a third-party monolith as everything &quot;that is completely out of your control&quot;, something you can't change its internal behaviour. It might be your CRM software that your SaaS application relies on or even that old piece of software which you don't have the source code.&lt;/p&gt;
    &lt;/section&gt;
    &lt;section&gt;
        &lt;time&gt;8:01&lt;/time&gt;
        &lt;h2&gt;Distributed Monolith&lt;/h2&gt;
        &lt;p&gt;Distributed Monolith differs from a simple monolith by having its functionalities are split across different services, using the network to communicate with each other. Because of how we split our system apart, or even due to different reasons, we often end up having pieces of code being changed across module boundaries.&lt;/p&gt;
        &lt;p&gt;It is, arguably, the worst scenario you can be as the team who maintains it will have all the challenges a distributed system has along with the downsides of a monolith. It introduces a high cost to change functionalities, larger-scoped deployments and requires higher co-ordination activities - as you have more things that might go wrong.&lt;/p&gt;
    &lt;/section&gt;
    &lt;section&gt;
        &lt;time&gt;10:20&lt;/time&gt;
        &lt;blockquote&gt;
            &lt;p&gt;Fundamentally, you have to accept that monolith isn't necessarily the enemy - it's extremely rare that your goal is to kill the monolith. It sometimes happens but, most of the time, you're in a situation where you're trying to achieve something as a business but your current architecture won't let you achieve that goal.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;This is an important bit from his presentation and it needs to be transcribed as is. A Monolith Service by itself is not a bad thing and, like any other architectural decision, it has its pros and cons. We should only switch from a monolith to a microservice architecture when its benefits overcome the cost of maintaining a complex distributed system.&lt;/p&gt;
    &lt;/section&gt;
    &lt;section&gt;
        &lt;time&gt;12:44&lt;/time&gt;
        &lt;blockquote&gt;
            &lt;p&gt;You won't appreciate the true horror, pain and suffering of microservices until you're running then in production.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;Perhaps a good start might be extracting one module from your Modular Monolith into an external service. What you learn from observing this new service might give you enough insights to continue with the transition from a monolith to a microservice architecture.&lt;/p&gt;
    &lt;/section&gt;
    &lt;section&gt;
        &lt;time&gt;15:15&lt;/time&gt;
        &lt;h2&gt;Strangler Fig Pattern&lt;/h2&gt;
        &lt;p&gt;At this point in his presentation, Sam cut the chase and started to present solutions (architectural patterns) that will help us to decompose a monolith service. Strangler Fig is a pattern in which you wrap new functionalities around the existing ones in a way that the existing solution is not changed or is aware of it. In practical terms, he suggests us introduce an HTTP Proxy to intercept calls to the existing service diverting the calls to the new one as well.&lt;/p&gt;
        &lt;p&gt;The &lt;b&gt;Strangler Fit Pattern fits perfectly when we are at the beginning of the transition to a microservice or when dealing with Third-Party Monoliths&lt;/b&gt;, as other components of our existing solution still depend on the data managed by the one which will be replaced. The original component tables will still be fed with new data, giving us time to rethink or redesign other components in the future.&lt;/p&gt;
    &lt;/section&gt;
    &lt;section&gt;
        &lt;time&gt;22:04&lt;/time&gt;
        &lt;h2&gt;Branch By Abstraction&lt;/h2&gt;
        &lt;p&gt;Although his explanation about this pattern was good enough for a presentation in front of a big audience, I reckon his own definition (taken from &lt;a href=&quot;https://samnewman.io/patterns/architectural/branch-by-abstraction/&quot;&gt;his blog&lt;/a&gt;) wraps it up perfectly.&lt;/p&gt;
        &lt;blockquote&gt;
            &lt;p&gt;When making a significant change to how a piece of functionality is implemented, the challenge is how to work on this reimplementation over a period of time. With branch-by-abstraction, you create a single abstraction point over the functionality to be reimplemented, allowing both the existing functionality and the new implementation to co-exist inside the same running process at the same time.&lt;/p&gt;
        &lt;/blockquote&gt;
        &lt;p&gt;At this point in his presentation, he started to describe the ideal step-by-step to implement this pattern. I've modified it slightly to make it easier to reproduce.&lt;/p&gt;
        &lt;ol&gt;
            &lt;li&gt;&lt;b&gt;Isolate the current implementation&lt;/b&gt; - This is the first and most important and delicate step of this pattern, where you isolate the current implementation from the rest of the service. At this step you have to move the logic of the current functionality you intend to replace and move it to a single place (same package, module or folder).&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;Create an abstraction point&lt;/b&gt; - Create an interface that will behave as the contract to call that given functionality. With the &lt;a href=&quot;http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod&quot;&gt;Liskov Substitution Principle&lt;/a&gt; in mind, you must make sure your software calls a default implementation of this internal, which will call your just isolated functionality.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;Start working on the new service implementation&lt;/b&gt; - Once you finish, the new service will be later called by the monolith via HTTP (assuming that you exposed the new functionality through a Web API) and the web client should be wrapped in an alternative implementation of the just created interface.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;Switch over when it is ready to release&lt;/b&gt; - &lt;/li&gt;
            &lt;li&gt;&lt;b&gt;Clean up&lt;/b&gt; - Observe production and gather data to assess the results. A rollback is still possible at this point, allowing you to revisit the implementation until everything is working perfectly. Once everything is working as expected, you can remove the old functionality from your codebase.&lt;/li&gt;
        &lt;/ol&gt;
    &lt;/section&gt;
    &lt;section&gt;
        &lt;time&gt;26:07&lt;/time&gt;
        &lt;h2&gt;Parallel Run&lt;/h2&gt;
        &lt;p&gt;Being a variation of Branch by Abstraction, Parallel Run allows both implementations to co-exist at the same time. This is particularly useful to check if the behaviour has changed. Although both branches have different implementations it's expected that they to behave the same way, unless otherwise noted. Therefore, when comparing the outcome of both functionalities, it's important to take the original implementation as the source of truth, where any discrepancy in the result comparison between them should be considered a failure in the new service.&lt;/p&gt;
    &lt;/section&gt;
    &lt;section&gt;
        &lt;time&gt;28:10&lt;/time&gt;
        &lt;h2&gt;Accessing the Data&lt;/h2&gt;
        &lt;p&gt;Entering in the last stage of his talk, Sam finally addresses what he describes as the hardest topic when decomposing a monolith: how to organize and access the data on from/on the just created service. On his conception, on the evolutionary point of view, the data migration should be comprised by the following steps.&lt;/p&gt;
        &lt;ol&gt;
            &lt;li&gt;&lt;b&gt;Temporarily reuse the existing functionality database&lt;/b&gt; - Direct communication between the new service and the existing database would be allowed in as a temporary measure to stabilize the new functionality. Treating this as a permanent solution, though, might be the beginning of a new distributed monolith due to how tightly coupled both services became.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;Expose the existing data via API&lt;/b&gt; - This solution is intended to reduce, but not remove, the coupling between both services. It gives developers more flexibility to react to possible changes that might happen in the database schema. He encourages us, though, to revisit the way information is consumed or ingested to avoid cyclic dependencies between both services - a common antipattern found in distributed monoliths.&lt;/li&gt;
            &lt;li&gt;&lt;b&gt;Move the data to the new service&lt;/b&gt; - Turning the new service into the source of truth is the definitive move to finish the migration from monolith to a microservice architecture. It comes with its challenges though. Joins between tables have to be rethought, split tables might be necessary and referential integrity provided by the database layer is completely off the table.&lt;/li&gt;
        &lt;/ol&gt;
    &lt;/section&gt;
&lt;/article&gt;

&lt;h2&gt;Takeaways from talk&lt;/h2&gt;
&lt;p&gt;Newman did a brilliant job outlining the tradeoffs of prematurely adopting Microservice Architecture and I reckon there’s richness on his speech when he describes the dreadful consequences when we mistakenly end up creating a Distributed Monolith. Tackling the issues it introduces leads us to &lt;a href=&quot;https://github.com/korfuri/awesome-monorepo&quot;&gt;introduce new hacks in our architecture and deployment pipeline&lt;/a&gt;, like monorepo or shared modules between services. As Microservices are independently deployable - and generally speaking share no source code between them - our CI/CD is actually simpler. It is a good balance between cost and delivered value to our stakeholders.&lt;/p&gt;

&lt;p&gt;By reading between the lines we can also notice how much he is concerned about monitoring the runtime environment and tackle unexpected issues at early stages of its deployments. Due to the complexity of distributed systems, handling network and hardware issues before the business requirements make the software complex would save us several hours of development.&lt;/p&gt;</content><author><name></name></author><category term="engineering" /><category term="information architecture" /><category term="cost management" /><summary type="html">This an opinionated transcription of a talk that Sam Newman has presented in the 2019 GOTO Conference, Berlin edition. There were several points on his presentation that, I think, were spot on and deserves to be transcribed and better explained. There is a bit of a debate about whether or not to start from a Monolith and then move to a Microservice Architecture. Understanding how decomposing monolith might not only shed a light on this but also made us understand the benefits of doing it gradually.</summary></entry><entry><title type="html">Producing Professional Deliverables</title><link href="https://miere.observer/engineering/2020/04/20/Producing-professional-deliverables.html" rel="alternate" type="text/html" title="Producing Professional Deliverables" /><published>2020-04-20T00:00:00+10:00</published><updated>2020-04-20T00:00:00+10:00</updated><id>https://miere.observer/engineering/2020/04/20/Producing-professional-deliverables</id><content type="html" xml:base="https://miere.observer/engineering/2020/04/20/Producing-professional-deliverables.html">&lt;p&gt;When someone is described as a professional one might see that person as someone who does something for a living. Others might agree with the Cambridge dictionary, seeing professionals as those who have “[…] the type of job that needs a high level of education and training” &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Perhaps we can all agree that the meaning of words evolves as time passes by - having its meaning adapted to suit a more recent context. Maybe “professional” in the modern days might’ve acquired different meaning from what it used to have in the past.&lt;/p&gt;

&lt;h2 id=&quot;the-need-for-consistency&quot;&gt;The need for consistency&lt;/h2&gt;
&lt;p&gt;Let’s take football players &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; for a moment. They only begun getting paid as professionals since last quarter of the 18th century &lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; but when we compare the quality of the games back then with nowadays’, and we put nostalgia aside, the gap is huge. Pelé, Maradona, Zidane and Messi are historically regarded as those who took the game to the next level. But so did managers and coaches, “who dreamed up catenaccio and zonal marking and the sweeper system, all of it designed to stop the virtuosos showcasing their talents” &lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;The bar was raised to a point where we’ve been scoring less than a hundred years ago &lt;sup id=&quot;fnref:4:1&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;. While only a few players can keep up with their careers for more than 8 years &lt;sup id=&quot;fnref:4:2&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, most of them tend to retire quite early - especially if compared to a software engineer. In fact, the most successful footballers were those who had more &lt;strong&gt;consistent performance&lt;/strong&gt; in their teams.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Consistency&lt;/em&gt; is probably the most desirable skill I look for when I hire someone. Independently on how senior as an engineer you are, delivering consistent results means that I can predict how long it takes for you to finish your tasks, how many issues you might introduce in software and, how much effort should I put for you to reach the ideal performance within the team.&lt;/p&gt;

&lt;p&gt;The more senior you are the fewer issues you might introduce, the faster you can learn and adopt a new technique and the more adaptable you are to tackle problems you’ve never faced before. But, if you don’t master the techniques you’ve learned before in a way that you produce consistent results, your seniority might be easily replaceable by a junior. Think about it, if you can learn consistently, the more I teach you the more improvement I can see on your deliverables. On the other hand, a non-consistent senior developer might learn something new and put it in practice straight away but may struggle to use it under a different scenario as he hasn’t trained long enough to master his new skill.&lt;/p&gt;

&lt;h2 id=&quot;reproducibility-is-key&quot;&gt;Reproducibility is key&lt;/h2&gt;
&lt;p&gt;If we go a few centuries back, we would see craft workers (such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Artisan&quot;&gt;Artisans&lt;/a&gt;) in action, perhaps the contemporary version of the Software Engineer as we know it &lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;. A skilled craft worker creates material objects partly or entirely by hand. Artisans were the dominant producers of consumer products before the Industrial Revolution. Once passed through the career chain from apprentice to journeyman, he could be elected to become a master craftsman, enjoying one of the highest social statuses in their communities at the time. &lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;The success of the &lt;a href=&quot;https://en.wikipedia.org/wiki/British_Agricultural_Revolution&quot;&gt;Agricultural Revolution&lt;/a&gt; of the 18th century created a favourable climate for industrialization. With increasing production of food, the British population could be fed at lower prices with less effort than ever before. The surplus of food meant that British families &lt;a href=&quot;https://study.com/academy/lesson/causes-of-the-first-industrial-revolution.html&quot;&gt;could use the money they saved to purchase manufactured goods&lt;/a&gt;. Under given circumstances, it’s easy to understand that craft workers weren’t enough to cope with the higher demand for goods that were needed.&lt;/p&gt;

&lt;p&gt;Just as the demand for consistent and reliable delivered goods ended up replacing artisans with machines, &lt;span class=&quot;highlight&quot;&gt;the overwhelming demand for value to be provided by the current software industry will also raise the bar&lt;/span&gt; in a way that Software Engineers who lack precision, predictability or measurement won’t make it far in their careers.&lt;/p&gt;

&lt;p&gt;To better understand this idea, let’s assume a developer was elected by his team to design a microservice from scratch. On his team, there’s no one in charge of the infrastructure or taking macro architectural decisions. A good outcome from this project might be big deal for his reputation, especially if no one else has to worry about bugs if there’s a brief README file explaining how to run the software locally and releasing a new version of it is just a matter of having a Pull Request approved.&lt;/p&gt;

&lt;p&gt;One might argue that taking care of all of these details consumes valuable time that would be better spent implementing new features. But I dread the days when I had to stop what I was doing to answer questions from my colleagues when they have to maintain a software I’ve previously written without proper documentation. Eventually, I realized that when the README file is good enough I have fewer interruptions. When my unit tests cover most of - if not all - the source code, I have fewer bugs to fix and hence have more time to create something new.&lt;/p&gt;

&lt;p&gt;A wise engineer, though, may go even further and streamline his knowledge in a way that can be easily reproducible as well. What if a Kotlin developer has &lt;a href=&quot;https://github.com/Skullabs/kos-sample-gradle&quot;&gt;a small Gradle project&lt;/a&gt; on his Github account? Why don’t we create &lt;a href=&quot;https://github.com/miere/terraform-aws-fargate-ha-web&quot;&gt;a module to deploy our software using Docker&lt;/a&gt;? Wouldn’t it be useful if you save that &lt;a href=&quot;https://github.com/miere/terraw&quot;&gt;small script&lt;/a&gt; that automates everything you need to run your terraform scripts? If designing software is the main part of your job, perhaps you should figure out a way to reproduce the boring tasks as quickly as possible when the necessity comes up you will be able to deliver a masterpiece much faster than anyone else.&lt;/p&gt;

&lt;h2 id=&quot;going-beyond-kents-simple-design&quot;&gt;Going beyond Kent’s Simple Design&lt;/h2&gt;
&lt;p&gt;Speaking of masterpieces, in the 1990s Kent Beck introduced The Four Elements of Simple Design, a principle that would be later immortalised in his &lt;a href=&quot;https://www.amazon.com/gp/product/0201616416&quot;&gt;book Extreme Programming Explained&lt;/a&gt;. He states these rules as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Runs all the tests&lt;/li&gt;
  &lt;li&gt;Has no duplicated logic. Be wary of hidden duplication like parallel class hierarchies&lt;/li&gt;
  &lt;li&gt;States every intention important to the programmer&lt;/li&gt;
  &lt;li&gt;Has the fewest possible classes and methods&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;His rules were written in priority order, where the ones at the top take priority over the following ones. It comes as no surprise that, if you can’t afford the time to have all of it, he would like you to put more effort into tests. Being behind the roots of unit testing frameworks we have nowadays &lt;sup id=&quot;fnref:9&quot;&gt;&lt;a href=&quot;#fn:9&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;, the author of &lt;a href=&quot;https://en.wikipedia.org/wiki/SUnit&quot;&gt;SUnit&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Kent_Beck&quot;&gt;co-authoring&lt;/a&gt; JUnit with Erich Gamma, he’s an avid advocate of testing as feedback tool &lt;sup id=&quot;fnref:8&quot;&gt;&lt;a href=&quot;#fn:8&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;, something you can read from the man itself on his award-winning book &lt;sup id=&quot;fnref:10&quot;&gt;&lt;a href=&quot;#fn:10&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt; &lt;a href=&quot;https://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530/&quot;&gt;Test-Driven Development by Example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s take the popular &lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;MVC pattern&lt;/a&gt; to draw a comparison with Beck’s rules. Between the late 2000s and early 2010s, MVC was considered the &lt;em&gt;silver bullet pattern&lt;/em&gt; for his adopters &lt;sup id=&quot;fnref:11&quot;&gt;&lt;a href=&quot;#fn:11&quot; class=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt;. In an era where nobody was actually concerned about &lt;a href=&quot;https://en.wikipedia.org/wiki/Separation_of_concerns&quot;&gt;Separation of Concerns&lt;/a&gt; and the front-end was mostly rendered by the backend, it was indeed quite convenient to grow your software by simply placing classes in one of its three buckets. Despite its convenience, not all software designed mostly using MVC (from end-to-end) is easy to maintain, once it grows bigger the need for new features to be included urges us to adopt different approaches - a phenomenon well described by Meir Lehman &lt;a href=&quot;https://ieeexplore.ieee.org/document/1456074&quot;&gt;in another master piece&lt;/a&gt; &lt;sup id=&quot;fnref:12&quot;&gt;&lt;a href=&quot;#fn:12&quot; class=&quot;footnote&quot;&gt;11&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Kent’s rules, on the other hand, are distinguished from other methodologies by focusing on the &lt;em&gt;outcome you might have&lt;/em&gt; instead of &lt;em&gt;how one has to organize his code&lt;/em&gt;. It is benefit-driven, encouraging you to adopt whatever strategy you have in your playbook as long as you respect those outcomes. As a result, maintainability and fast feedback on breaking changes will be the benefits those who adopt it will be rewarded with. That’s the actual mindset a professional has that to keeps the &lt;strong&gt;quality&lt;/strong&gt; of their deliverables higher than the average.&lt;/p&gt;

&lt;p&gt;Since it’s been more than 2 decades since these rules have been crafted, if you allow me, I’d like to respectfully include a couple of items that I think should be mandatory for any professional delivery in software.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;It should be possible to run all your tests with a single (yet simple) command.&lt;/li&gt;
  &lt;li&gt;It should be possible to run your software with a single (yet simple) command.&lt;/li&gt;
  &lt;li&gt;It should be possible to package your software with a single (yet simple) command.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While these 3 rules I’m introducing might be seen as silly at first glance, it makes perfect sense when you need to handover your deliverable to someone else. Just as Beck’s rules, they’ve been ordered by priority as well, thus, if you can’t afford to have all of them, just make sure one can painlessly run all tests and check for regressions on your software. The last two rules are somewhat related, as you need to package your software to run it locally. Thoroughly reviewing all the dependencies (libraries, tools, and dependent services) your service relies on are &lt;a href=&quot;https://dzone.com/articles/learn-how-to-setup-a-cicd-pipeline-from-scratch&quot;&gt;the foundation to have a hassle free CI/CD setup process&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h2&gt;
&lt;p&gt;Professionalism is a quite subjective topic, but it worth keeping in mind that we’re living in a different world where the current standards of our industry expect higher delivery pace, and less time spent on bugs or amending poorly developed features. Even complex structures have been shrewdly discouraged. In fact, managers are going one step further in this direction, trying their best to reduce the learning curve when developers jump in to maintain a different microservice, independently from whether the developer is a newcomer or a long-time hero within the company &lt;sup id=&quot;fnref:13&quot;&gt;&lt;a href=&quot;#fn:13&quot; class=&quot;footnote&quot;&gt;12&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;If I could sum up the aforementioned topics, I’d say the Professional Software Engineer from nowadays should be consistently capable of delivering high-quality software in a way that anyone with the source code could maintain it with no hassle.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;Special thanks to &lt;a href=&quot;https://www.linkedin.com/in/gabrielsjacques/&quot;&gt;Gabriel Jacques&lt;/a&gt;, Ricardo Baumgartner and &lt;a href=&quot;http://vnaik.com&quot;&gt;Varun Naik&lt;/a&gt; for their contributions.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://dictionary.cambridge.org/dictionary/english/professional&quot;&gt;Cambrige dictionary’s definition of the word “professional”&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Football_player&quot;&gt;Football&lt;/a&gt;, also known as soccer for the Americans &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fergus_Suter&quot;&gt;Fergus Suter&lt;/a&gt; was arguably the first recognised professional footballer. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;Instead of the consistent and insistent downward trend in goals we have seen over a century and a half of play, in the last 60 years or so there appears to be a levelling off. Goals are not dying. They are plateauing. Scoring has remained essentially stable in the last two decades, perhaps even as far back as the 1970s. See: &lt;a href=&quot;https://slate.com/culture/2013/08/the-numbers-game-why-soccer-teams-score-fewer-goals-than-they-did-100-years-ago.html&quot;&gt;The Great Leveling&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:4:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:4:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot;&gt;
      &lt;p&gt;In fact, there’s a whole movement in which developers describe themselves as Software Craftsman. Perhaps the best description of how Software Engineering became more relevant in the field can be found in &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_craftsmanship&quot;&gt;this article&lt;/a&gt; in Wikipedia. &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot;&gt;
      &lt;p&gt;See &lt;em&gt;History of Western Civilization&lt;/em&gt; at Boise State University’s &lt;a href=&quot;https://web.archive.org/web/20090107061228/http://history.boisestate.edu/westciv/medsoc/23.shtml&quot;&gt;“Document No.23”&lt;/a&gt;. Archived from the &lt;a href=&quot;http://history.boisestate.edu/westciv/medsoc/23.shtml&quot;&gt;original&lt;/a&gt; on 2009-01-07. Retrieved 2009-01-08. &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:9&quot;&gt;
      &lt;p&gt;Kent Bech is often cast as the mind that leads to the &lt;a href=&quot;https://en.wikipedia.org/wiki/XUnit&quot;&gt;xUnit&lt;/a&gt; frameworks being widely adopted. &lt;a href=&quot;#fnref:9&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:8&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://medium.com/@kentbeck_7670/programmer-test-principles-d01c064d7934&quot;&gt;According to Beck&lt;/a&gt;, “Programmer tests are an oracle providing feedback coding-decision-by-coding-decision”. &lt;a href=&quot;#fnref:8&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:10&quot;&gt;
      &lt;p&gt;Co-authored by Addison-Wesley, the book is award-winning of the Jolt Productivity Award. &lt;a href=&quot;#fnref:10&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:11&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://twitter.com/miere/status/14496627913924608&quot;&gt;Here&lt;/a&gt; is a discussion (in PT_BR) back in 2010 I had on Twitter about this very topic, showing how heated a conversation can get when enquiring MVC developers about MVC replacements. At the time, I was under heavy training by &lt;a href=&quot;https://twitter.com/anielson&quot;&gt;one of my previous mentors&lt;/a&gt;, as he noticed my knowledge was mostly focused on hardware and low-level software development neglecting common design patterns. &lt;a href=&quot;#fnref:11&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:12&quot;&gt;
      &lt;p&gt;In 1974, Lehman stated in his book that “as an E-type system evolves, its complexity increases unless work is done to maintain or reduce it”. &lt;a href=&quot;#fnref:12&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:13&quot;&gt;
      &lt;p&gt;It worth read about &lt;a href=&quot;https://hbr.org/2014/01/how-netflix-reinvented-hr&quot;&gt;how Netflix reinvented the way they manage their teams&lt;/a&gt;, what are their expectations and for how long they’ve decided to invest and quality and reproducibility on their teams to avoid rework and spend more time on what will have higher return of investment. &lt;a href=&quot;#fnref:13&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="engineering" /><category term="master" /><summary type="html">When someone is described as a professional one might see that person as someone who does something for a living. Others might agree with the Cambridge dictionary, seeing professionals as those who have “[…] the type of job that needs a high level of education and training” 1. Perhaps we can all agree that the meaning of words evolves as time passes by - having its meaning adapted to suit a more recent context. Maybe “professional” in the modern days might’ve acquired different meaning from what it used to have in the past. Cambrige dictionary’s definition of the word “professional” &amp;#8617;</summary></entry></feed>